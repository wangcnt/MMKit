//
//  MMOperation.h
//  MMCoreServices
//
//  Created by Mark on 2018/1/22.
//  Copyright © 2018年 Mark. All rights reserved.
//

#import <Foundation/Foundation.h>

#import "MMCoreDefines.h"
#import "MMServiceID.h"

@protocol MMRequest, MMSocketRequest, MMResponse, MMSessionManager, MMConnection, MMSessionConfiguration;
/**
 * Async operation.
 */
@protocol MMOperation <NSObject>

@required
@property (nonatomic, strong) id<MMServiceID> serviceID;    ///< MUST, or a damn thing will come for you.
@property (nonatomic, strong, readonly) id<MMRequest> request;  ///< Must be set in -init.
@property (nonatomic, strong) id<MMSessionConfiguration> configuration; ///< Must be set before -start.

@property (nonatomic, strong) NSError *error;

@property (nonatomic, strong, readonly) id<MMSessionManager> sessionManager;

@property (nonatomic, strong, readonly) id<MMResponse> response;   ///< Generated by connection.
@property (nonatomic, assign) NSTimeInterval timeoutInterval;   ///< default = 60s

@property (nonatomic, assign, readonly) double consumedTimestamp;

@property (nonatomic, assign) NSInteger maxRetryTimes;
@property (nonatomic, assign) NSInteger retriedTimes;

@property (nonatomic, strong) MMRequestStepHandler stepHandler;
@property (nonatomic, strong) MMRequestProgressHandler progressHandler;

/*!
 * At begining of -start, you can prepare the parameters here to make sure that
 * the real request can be made before -willSend.
 *
 * But the current thread won't be the thread in -init, so some job should be
 * done in -init to make thread safe, such as the CoreData tasks.
 *
 * MUST: [super willStart];
 */
- (void)willStart;

/*!
 * After -willStart and every state in current operation is OK, it will send
 * the current request to MMSessionManager to access to server, so you can do
 * some AOP configurations for requests here.
 *
 * Before -willSend, every request could prepare itself at first in message
 * MMRequest-prepare.
 */
- (void)willSend;

/*!
 * After -willSend, the request will be tried sending to server, it takes some
 * time to wait for its turn to access server and fetch data. When data is
 * received, you can make a decision to retry the current request or continue
 * the next request here.
 *
 * If there is no need to retry or continue, -loadFinished will be invoked, then
 * the current NSOperation will be terminated, @see -loadFinished.
 *
 * If it's needed to continue, the data source should be changed before
 * returning in method -shouldContinue, then the MMRequest will remake the
 * payload.
 *
 * NO will be both returned by default;
 */
- (BOOL)shouldRetry;
- (BOOL)shouldContinue;

/*!
 * The persistence job should be done here.
 */
- (void)persist;

/*!
 * Finally, the current operation will be notice to terminate cos' -isFinished
 * will be set to YES here, what we can do is to finish the -persist job before
 * YES.
 *
 * MUST: [super loadFinished].
 */
- (void)loadFinished;

@end

@protocol MMHTTPOperation <MMOperation>
@end

@protocol MMSocketOperation <MMOperation>
@required
@property (nonatomic, strong) NSString *connectionID; ///< MMSocketConnection's identifier. @see MMSocketConnectionType
@end


@interface MMOperation : NSOperation <MMOperation> {
    id<MMRequest> _request;
    MMRequestProgressHandler _progressHandler;
}
@end

@interface MMHTTPOperation : MMOperation <MMHTTPOperation>
@end

@interface MMSocketOperation : MMOperation <MMSocketOperation>
@end
