//
//  MMOperation.h
//  MMCoreServices
//
//  Created by Mark on 2018/1/22.
//  Copyright © 2018年 Mark. All rights reserved.
//

#import <Foundation/Foundation.h>

#import "MMCoreDefines.h"

@protocol MMRequest, MMSocketRequest, MMResponse, MMSessionManager, MMConnection, MMSessionConfiguration;
/**
 * start之前一定要准备好request, sessionConfiguration
 */
@protocol MMOperation <NSObject>

@property (nonatomic, strong, readonly) id<MMRequest> request;  ///< Must be set in -init.
@property (nonatomic, strong) id<MMSessionConfiguration> configuration; ///< Must be set before -start.

@property (nonatomic, strong) NSError *error;

@property (nonatomic, strong, readonly) id<MMSessionManager> sessionManager;

@property (nonatomic, strong, readonly) id<MMResponse> response;   ///< Generated by connection.
@property (nonatomic, assign) NSTimeInterval timeoutInterval;   ///< default = 60s

@property (nonatomic, assign, readonly) double consumedTimestamp;

@property (nonatomic, assign) NSInteger maxRetryTimes;
@property (nonatomic, assign) NSInteger retryedTimes;

@property (nonatomic, strong) MMRequestStepHandler stepHandler;
@property (nonatomic, strong) MMRequestProgressHandler progressHandler;

/*!
 * At begining of NSOperation-start, you can make associations amoung
 * configurations here to make sure that the real request can be made.
 *
 * MUST: [super willStart];
 */
- (void)willStart;

/*!
 * After -willStart and every state in current NSOperation is OK, I will send
 * the current request to MMSessionManager to access to server, so you can do
 * some AOP configurations for requests.
 *
 * Before -willSend, every request could prepare itself at first in message
 * MMRequest-prepare.
 */
- (void)willSend;

/*!
 * After -willSend, the request was sent to server yet, it takes some time to
 * fetch data from server, when received, you can make a decision to retry the
 * current request or continue the next request here with resetting the response
 * and error to nil, if no need to retry or continue, -loadFinished will be
 * invoked.
 *
 * If it's need to continue, the data source should be changed before returning
 * in method -shouldContinue, then the MMRequest.payload will remake the
 * bodyData.
 *
 * The value NO will be returned both by default;
 */
- (BOOL)shouldRetry;
- (BOOL)shouldContinue;

/*!
 * The persistence job should be done here.
 */
- (void)persist;

/*!
 * Finally, the current operation will be notice to terminate in this method
 * cos' NSOperation-isFinished will be set to YES here, what we can do is
 * to finish the -persist job before setting to YES.
 *
 * MUST: [super loadFinished].
 */
- (void)loadFinished;

@end

@protocol MMHTTPOperation <MMOperation>
@end

@protocol MMSocketOperation <MMOperation>
@required
@property (nonatomic, strong) NSString *connectionID; ///< MMSocketConnection's identifier. @see MMSocketConnectionType
@end


@interface MMOperation : NSOperation <MMOperation> {
    id<MMRequest> _request;
    MMRequestProgressHandler _progressHandler;
}
@end

@interface MMHTTPOperation : MMOperation <MMHTTPOperation>
@end

@interface MMSocketOperation : MMOperation <MMSocketOperation>
@end
